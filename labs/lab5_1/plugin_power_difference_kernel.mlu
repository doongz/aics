/*************************************************************************
 * Copyright (C) [2018] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/
// TODO：PowerDifference BCL单核实现
// file: plugin_power_difference_kernel.mlu
// 定义常量
#define ONELINE 256

__mlu_entry__ void PowerDifferenceKernel (half* input1, half* input2, int pow, half*output, int len)
{
  int quotient = len / ONELINE;
  __bang_printf ("%d %d\n", pow, len);
  int rem = len % ONELINE;
  
  // 声明NRAM空间
  __nram__ half input1_nram [ONELINE];
  __nram__ half input2_nram [ONELINE];
  
  if (rem != 0)
  {
    quotient +=1;
  }
  for (int i = 0; i < quotient; i ++)
  {
    //TODO：内存拷贝，从GDRAM的（input1 + i * ONELINE）位置开始，拷贝ONELINE * sizeof(half)大小的数据到input1_nram空间中
    __memcpy(input1_nram, input1 + i * ONELINE, ONELINE * sizeof(half), GDRAM2NRAM);
    __memcpy(input2_nram, input2 + i * ONELINE, ONELINE * sizeof(half), GDRAM2NRAM);
    //TODO：按元素减法操作，将input1_nram和input2_nram的对应元素相减并将结果存储在input1_nram中
    __bang_sub (input1_nram, input1_nram, input2_nram, ONELINE);
    //TODO：NRAM中两个数据块的数据拷贝操作
    __memcpy(input2_nram, input1_nram, ONELINE * sizeof(half), NRAM2NRAM);
    for (int j = 0; j < pow - 1; j++)
    {
      //TODO：按元素乘法操作
      __bang_mul (input1_nram, input1_nram, input2_nram, ONELINE);
    }
    //TODO：内存拷贝，从NRAM中将计算的结果拷贝至GDRAM中
    __memcpy(output + i * ONELINE, input1_nram, ONELINE * sizeof(half), NRAM2GDRAM);
  }
}