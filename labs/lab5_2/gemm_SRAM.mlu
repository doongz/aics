#include "mlu.h"
#define ROUND 256
__mlu_entry__ void gemm16Kernel(half *outputDDR, int8_t *input1DDR, int8_t *input2DDR,
	uint32_t m, uint32_t k, uint32_t n, int16_t pos) {
	__nram__ int8_t input1NRAM[256*256];
	__nram__ int8_t input2NRAM[256*256];
	__nram__ int8_t input2NRAM_tmp[256*256];
	__wram__ int8_t input2WRAM[256*256];
	__nram__ half outputNRAM[256*256];
	__memcpy(input1NRAM, input1DDR, m * k * sizeof(int8_t), GDRAM2NRAM); 
							//在这里将左矩阵一次性拷入NRAM
	
    int all_round = n / ( taskDim * ROUND);   //因为现在使用16个核同时运算，所以每个核循环的次数也相应减少
    int32_t dst_stride = (ROUND * k / 64) * sizeof(int8_t);
    int32_t src_stride = k * sizeof(int8_t);
    int32_t size = k * sizeof(int8_t);
    int32_t total_times = ROUND / 64;
    __mlu_shared__ int8_t input2SRAM1[256*1024];
    __mlu_shared__ int8_t input2SRAM2[256*1024];
    __mlu_shared__ int8_t* input2_read;
    __mlu_shared__ int8_t* input2_write;
    input2_write = input2SRAM1;
    
    __memcpy(input2_write, input2DDR + ROUND * k * (clusterId * 4), sizeof(int8_t) * k * ROUND * 4, GDRAM2SRAM);
    __sync_cluster();

    // __bang_printf("taskDim=%d,clusterId=%d,coreId=%d\n",taskDim,clusterId,coreId);
    for(int i = 0; i < all_round - 1; i++)
    {
        if (i % 2 == 0) {
            input2_write = input2SRAM2;
            input2_read = input2SRAM1;
        } else {
            input2_read = input2SRAM2;
            input2_write = input2SRAM1;
        }
        // copy GDRAM2SRAM
        if (coreId == 0x80) {
            __memcpy(input2_write, input2DDR + ROUND * k * (clusterId * 4 + (i + 1) * taskDim), sizeof(int8_t) * k * ROUND * 4, GDRAM2SRAM);
        } else {
            __memcpy(input2NRAM_tmp, input2_read + ROUND * k * coreId, sizeof(int8_t) * ROUND * k, SRAM2NRAM);

            for (int j = 0; j < total_times; j++) {
                __memcpy(input2NRAM + j * k, input2NRAM_tmp + j * 64 * k,
                                        size, NRAM2NRAM, dst_stride, src_stride, 64);
            }

            // copy NRAM2WRAM
            __memcpy(input2WRAM, input2NRAM, sizeof(int8_t) * k * ROUND, NRAM2WRAM);

            // compute
            // channel_in k, channel_out pos
            __bang_conv(outputNRAM, input1NRAM, input2WRAM, k, m, 1, 1, 1, 1, 1, ROUND, pos);

            // copy NRAM2GDRAM
            for (int j = 0; j < m; j++) {  
                __memcpy(outputDDR + (i * taskDim + taskId) * ROUND + j * n,   
                            outputNRAM + j * ROUND, ROUND * sizeof(half), NRAM2GDRAM);
            }
        }

        __sync_cluster();   //设置sync barrier
    }

    __memcpy(input2NRAM_tmp, input2_write + ROUND * k * coreId, sizeof(int8_t) * ROUND * k, SRAM2NRAM);

    for (int j = 0; j < total_times; j++) {
        __memcpy(input2NRAM + j * k, input2NRAM_tmp + j * 64 * k,
                                size, NRAM2NRAM, dst_stride, src_stride, 64);
    }

    // copy NRAM2WRAM
    __memcpy(input2WRAM, input2NRAM, sizeof(int8_t) * k * ROUND, NRAM2WRAM);

    // compute
    // channel_in k, channel_out pos
    __bang_conv(outputNRAM, input1NRAM, input2WRAM, k, m, 1, 1, 1, 1, 1, ROUND, pos);

    // copy NRAM2GDRAM
    for (int j = 0; j < m; j++) {  
            __memcpy(outputDDR + ((all_round - 1) * taskDim + taskId) * ROUND + j * n,   
                    outputNRAM + j * ROUND, ROUND * sizeof(half), NRAM2GDRAM);
    }
}
